// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v4.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:google_maps_places_ios/messages.g.dart';

class _TestGoogleMapsPlacesApiCodec extends StandardMessageCodec{
  const _TestGoogleMapsPlacesApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AutocompletePredictionIOS) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is FindAutocompletePredictionsRequestIOS) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is FindAutocompletePredictionsResponseIOS) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is LatLngBoundsIOS) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is LatLngIOS) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return AutocompletePredictionIOS.decode(readValue(buffer)!);
      
      case 129:       
        return FindAutocompletePredictionsRequestIOS.decode(readValue(buffer)!);
      
      case 130:       
        return FindAutocompletePredictionsResponseIOS.decode(readValue(buffer)!);
      
      case 131:       
        return LatLngBoundsIOS.decode(readValue(buffer)!);
      
      case 132:       
        return LatLngIOS.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class TestGoogleMapsPlacesApi {
  static const MessageCodec<Object?> codec = _TestGoogleMapsPlacesApiCodec();

  Future<FindAutocompletePredictionsResponseIOS?> findAutocompletePredictionsIOS(FindAutocompletePredictionsRequestIOS request);
  static void setup(TestGoogleMapsPlacesApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.GoogleMapsPlacesApiIOS.findAutocompletePredictionsIOS', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.GoogleMapsPlacesApiIOS.findAutocompletePredictionsIOS was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FindAutocompletePredictionsRequestIOS? arg_request = (args[0] as FindAutocompletePredictionsRequestIOS?);
          assert(arg_request != null, 'Argument for dev.flutter.pigeon.GoogleMapsPlacesApiIOS.findAutocompletePredictionsIOS was null, expected non-null FindAutocompletePredictionsRequestIOS.');
          final FindAutocompletePredictionsResponseIOS? output = await api.findAutocompletePredictionsIOS(arg_request!);
          return <Object?, Object?>{'result': output};
        });
      }
    }
  }
}
