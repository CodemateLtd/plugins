// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v4.2.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum TypeFilterIOS {
  address,
  cities,
  establishment,
  geocode,
  regions,
}

enum PlaceTypeIOS {
  accounting,
  administrativeAreaLevel1,
  administrativeAreaLevel2,
  administrativeAreaLevel3,
  administrativeAreaLevel4,
  administrativeAreaLevel5,
  airport,
  amusementPark,
  aquarium,
  archipelago,
  artGallery,
  atm,
  bakery,
  bank,
  bar,
  beautySalon,
  bicycleStore,
  bookStore,
  bowlingAlley,
  busStation,
  cafe,
  campground,
  carDealer,
  carRental,
  carRepair,
  carWash,
  casino,
  cemetery,
  church,
  cityHall,
  clothingStore,
  colloquialArea,
  continent,
  convenienceStore,
  country,
  courthouse,
  dentist,
  departmentStore,
  doctor,
  drugstore,
  electrician,
  electronicsStore,
  embassy,
  establishment,
  finance,
  fireStation,
  floor,
  florist,
  food,
  funeralHome,
  furnitureStore,
  gasStation,
  generalContractor,
  geocode,
  groceryOrSupermarket,
  gym,
  hairCare,
  hardwareStore,
  health,
  hinduTemple,
  homeGoodsStore,
  hospital,
  insuranceAgency,
  intersection,
  jewelryStore,
  laundry,
  lawyer,
  library,
  lightRailStation,
  liquorStore,
  locality,
  localGovernmentOffice,
  locksmith,
  lodging,
  mealDelivery,
  mealTakeaway,
  mosque,
  movieRental,
  movieTheater,
  movingCompany,
  museum,
  naturalFeature,
  neighborhood,
  nightClub,
  other,
  painter,
  park,
  parking,
  petStore,
  pharmacy,
  physiotherapist,
  placeOfWorship,
  plumber,
  plusCode,
  pointOfInterest,
  police,
  political,
  postalCode,
  postalCodePrefix,
  postalCodeSuffix,
  postalTown,
  postBox,
  postOffice,
  premise,
  primarySchool,
  realEstateAgency,
  restaurant,
  roofingContractor,
  room,
  route,
  rvPark,
  school,
  secondarySchool,
  shoeStore,
  shoppingMall,
  spa,
  stadium,
  storage,
  store,
  streetAddress,
  streetNumber,
  sublocality,
  sublocalityLevel1,
  sublocalityLevel2,
  sublocalityLevel3,
  sublocalityLevel4,
  sublocalityLevel5,
  subpremise,
  subwayStation,
  supermarket,
  synagogue,
  taxiStand,
  touristAttraction,
  townSquare,
  trainStation,
  transitStation,
  travelAgency,
  university,
  veterinaryCare,
  zoo,
}

class LatLngIOS {
  LatLngIOS({
    this.latitude,
    this.longitude,
  });

  double? latitude;
  double? longitude;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['latitude'] = latitude;
    pigeonMap['longitude'] = longitude;
    return pigeonMap;
  }

  static LatLngIOS decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return LatLngIOS(
      latitude: pigeonMap['latitude'] as double?,
      longitude: pigeonMap['longitude'] as double?,
    );
  }
}

class LatLngBoundsIOS {
  LatLngBoundsIOS({
    this.southwest,
    this.northeast,
  });

  LatLngIOS? southwest;
  LatLngIOS? northeast;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['southwest'] = southwest?.encode();
    pigeonMap['northeast'] = northeast?.encode();
    return pigeonMap;
  }

  static LatLngBoundsIOS decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return LatLngBoundsIOS(
      southwest: pigeonMap['southwest'] != null
          ? LatLngIOS.decode(pigeonMap['southwest']!)
          : null,
      northeast: pigeonMap['northeast'] != null
          ? LatLngIOS.decode(pigeonMap['northeast']!)
          : null,
    );
  }
}

class AutocompletePredictionIOS {
  AutocompletePredictionIOS({
    this.distanceMeters,
    required this.fullText,
    required this.placeId,
    required this.placeTypes,
    required this.primaryText,
    required this.secondaryText,
  });

  int? distanceMeters;
  String fullText;
  String placeId;
  List<int?> placeTypes;
  String primaryText;
  String secondaryText;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['distanceMeters'] = distanceMeters;
    pigeonMap['fullText'] = fullText;
    pigeonMap['placeId'] = placeId;
    pigeonMap['placeTypes'] = placeTypes;
    pigeonMap['primaryText'] = primaryText;
    pigeonMap['secondaryText'] = secondaryText;
    return pigeonMap;
  }

  static AutocompletePredictionIOS decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AutocompletePredictionIOS(
      distanceMeters: pigeonMap['distanceMeters'] as int?,
      fullText: pigeonMap['fullText']! as String,
      placeId: pigeonMap['placeId']! as String,
      placeTypes: (pigeonMap['placeTypes'] as List<Object?>?)!.cast<int?>(),
      primaryText: pigeonMap['primaryText']! as String,
      secondaryText: pigeonMap['secondaryText']! as String,
    );
  }
}

class _GoogleMapsPlacesApiIOSCodec extends StandardMessageCodec {
  const _GoogleMapsPlacesApiIOSCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AutocompletePredictionIOS) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is LatLngBoundsIOS) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is LatLngIOS) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AutocompletePredictionIOS.decode(readValue(buffer)!);

      case 129:
        return LatLngBoundsIOS.decode(readValue(buffer)!);

      case 130:
        return LatLngIOS.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class GoogleMapsPlacesApiIOS {
  /// Constructor for [GoogleMapsPlacesApiIOS].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  GoogleMapsPlacesApiIOS({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _GoogleMapsPlacesApiIOSCodec();

  Future<List<AutocompletePredictionIOS?>?> findAutocompletePredictionsIOS(
      String arg_query,
      LatLngBoundsIOS? arg_locationBias,
      LatLngBoundsIOS? arg_locationRestriction,
      LatLngIOS? arg_origin,
      List<String?>? arg_countries,
      List<int?>? arg_typeFilter,
      bool? arg_refreshToken) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.GoogleMapsPlacesApiIOS.findAutocompletePredictionsIOS',
        codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel.send(<Object?>[
      arg_query,
      arg_locationBias,
      arg_locationRestriction,
      arg_origin,
      arg_countries,
      arg_typeFilter,
      arg_refreshToken
    ]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as List<Object?>?)
          ?.cast<AutocompletePredictionIOS?>();
    }
  }
}
